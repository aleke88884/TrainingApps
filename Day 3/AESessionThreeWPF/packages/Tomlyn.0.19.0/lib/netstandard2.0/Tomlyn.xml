<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tomlyn</name>
    </assembly>
    <members>
        <member name="T:Tomlyn.Collections.Iterator`2">
            <summary>
            Iterator ala Stark.
            </summary>
            <typeparam name="TElement">The type of an element of the iteration.</typeparam>
            <typeparam name="TState">The type of the state of the iteration.</typeparam>
        </member>
        <member name="P:Tomlyn.Collections.Iterator`2.Start">
            <summary>
            Gets the start state for the iteration.
            </summary>
        </member>
        <member name="M:Tomlyn.Collections.Iterator`2.TryGetNext(`1@)">
            <summary>
            Tries to get the next element in the iteration.
            </summary>
            <param name="state">The state.</param>
            <returns>none if no element, or an element</returns>
        </member>
        <member name="T:Tomlyn.Helpers.TomlNamingHelper">
            <summary>
            Naming helpers used by Tomlyn.
            </summary>
        </member>
        <member name="M:Tomlyn.Helpers.TomlNamingHelper.PascalToSnakeCase(System.String)">
            <summary>
            Converts a string from pascal case (e.g `ThisIsFine`) to snake case (e.g `this_is_fine`).
            </summary>
            <param name="name">A PascalCase string to convert to snake case.</param>
            <returns>The snake case version of the input string.</returns>
        </member>
        <member name="T:Tomlyn.Model.ITomlMetadataProvider">
            <summary>
            Allow to attach metadata to properties
            </summary>
        </member>
        <member name="P:Tomlyn.Model.ITomlMetadataProvider.PropertiesMetadata">
            <summary>
            Gets or sets the attached metadata for properties
            </summary>
        </member>
        <member name="T:Tomlyn.Model.ObjectKind">
            <summary>
            Kind of an TOML object.
            </summary>
        </member>
        <member name="T:Tomlyn.Model.SyntaxToModelTransform">
            <summary>
            Transform syntax to a model.
            </summary>
        </member>
        <member name="M:Tomlyn.Model.SyntaxToModelTransform.GetTomlPropertyMetadata(Tomlyn.Syntax.SyntaxNode)">
            <summary>
            Create metadata for model.
            </summary>
            <param name="syntax">The syntax used to collect the metadata from.</param>
            <returns>The metadata to attach to the property; null if no metadata.</returns>
        </member>
        <member name="T:Tomlyn.Model.TomlArray">
            <summary>
            Runtime representation of a TOML array
            </summary>
        </member>
        <member name="T:Tomlyn.Model.TomlObject">
            <summary>
            Base class for the runtime representation of a TOML object
            </summary>
        </member>
        <member name="P:Tomlyn.Model.TomlObject.Kind">
            <summary>
            The kind of the object
            </summary>
        </member>
        <member name="P:Tomlyn.Model.TomlPropertyMetadata.LeadingTrivia">
            <summary>
            Gets the leading trivia attached to this node. Might be null if no leading trivias.
            </summary>
        </member>
        <member name="P:Tomlyn.Model.TomlPropertyMetadata.TrailingTrivia">
            <summary>
            Gets the trailing trivia attached to this node. Might be null if no trailing trivias.
            </summary>
        </member>
        <member name="P:Tomlyn.Model.TomlPropertyMetadata.TrailingTriviaAfterEndOfLine">
            <summary>
            Gets the trailing trivia attached to this node. Might be null if no trailing trivias.
            </summary>
        </member>
        <member name="T:Tomlyn.Model.TomlTable">
            <summary>
            Runtime representation of a TOML table
            </summary>
            <remarks>
            This object keep the order of the inserted key=values
            </remarks>
        </member>
        <member name="M:Tomlyn.Model.TomlTable.#ctor">
            <summary>
            Creates an instance of a <see cref="T:Tomlyn.Model.TomlTable"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Model.TomlTable.#ctor(System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Model.TomlTable"/>.
            </summary>
            <param name="inline"></param>
        </member>
        <member name="P:Tomlyn.Model.TomlTable.PropertiesMetadata">
            <inheritdoc/>
        </member>
        <member name="T:Tomlyn.Model.TomlTableArray">
            <summary>
            Runtime representation of a TOML table array
            </summary>
        </member>
        <member name="P:Tomlyn.Parsing.ITokenProvider`1.HasErrors">
            <summary>
            Gets a boolean indicating whether this lexer has errors.
            </summary>
        </member>
        <member name="P:Tomlyn.Parsing.ITokenProvider`1.Errors">
            <summary>
            Gets error messages.
            </summary>
        </member>
        <member name="T:Tomlyn.Parsing.Lexer`2">
            <summary>
            Lexer enumerator that generates <see cref="T:Tomlyn.Parsing.SyntaxTokenValue"/>, to be used from a foreach.
            </summary>
        </member>
        <member name="M:Tomlyn.Parsing.Lexer`2.#ctor(`0)">
            <summary>
            Initialize a new instance of this <see cref="T:Tomlyn.Parsing.Lexer`2" />.
            </summary>
            <param name="sourceView">The text to analyze</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentNullException">If text is null</exception>
        </member>
        <member name="P:Tomlyn.Parsing.Lexer`2.HasErrors">
            <summary>
            Gets a boolean indicating whether this lexer has errors.
            </summary>
        </member>
        <member name="P:Tomlyn.Parsing.Lexer`2.Errors">
            <summary>
            Gets error messages.
            </summary>
        </member>
        <member name="T:Tomlyn.Parsing.Parser`1">
            <summary>
            The parser.
            </summary>
        </member>
        <member name="M:Tomlyn.Parsing.Parser`1.#ctor(Tomlyn.Parsing.ITokenProvider{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Tomlyn.Parsing.Parser`1"/> class.
            </summary>
            <param name="lexer">The lexer.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Tomlyn.Parsing.SyntaxTokenValue">
            <summary>
            A lightweight token struct to avoid GC allocations.
            </summary>
        </member>
        <member name="M:Tomlyn.Parsing.SyntaxTokenValue.#ctor(Tomlyn.Syntax.TokenKind,Tomlyn.Syntax.TextPosition,Tomlyn.Syntax.TextPosition,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Tomlyn.Parsing.SyntaxTokenValue"/> struct.
            </summary>
            <param name="kind">The type.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="value">Optional parse value of the token</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="F:Tomlyn.Parsing.SyntaxTokenValue.Kind">
            <summary>
            The type of token.
            </summary>
        </member>
        <member name="F:Tomlyn.Parsing.SyntaxTokenValue.Start">
            <summary>
            The start position of this token.
            </summary>
        </member>
        <member name="F:Tomlyn.Parsing.SyntaxTokenValue.End">
            <summary>
            The end position of this token.
            </summary>
        </member>
        <member name="F:Tomlyn.Parsing.SyntaxTokenValue.Value">
            <summary>
            The parsed value
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.ArrayItemSyntax">
            <summary>
            An item of an <see cref="T:Tomlyn.Syntax.ArraySyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.ArrayItemSyntax.#ctor">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.ArrayItemSyntax"/>
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.ArrayItemSyntax.Value">
            <summary>
            Gets or sets the value of this item.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.ArrayItemSyntax.Comma">
            <summary>
            Gets or sets the comma of this item (mandatory to separate elements in an array)
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.ArraySyntax">
            <summary>
            An array TOML node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.ArraySyntax.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Tomlyn.Syntax.ArraySyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.ArraySyntax.#ctor(System.Int32[])">
            <summary>
            Creates an instance of an <see cref="T:Tomlyn.Syntax.ArraySyntax"/>
            </summary>
            <param name="values">An array of integer values</param>
        </member>
        <member name="M:Tomlyn.Syntax.ArraySyntax.#ctor(System.String[])">
            <summary>
            Creates an instance of an <see cref="T:Tomlyn.Syntax.ArraySyntax"/>
            </summary>
            <param name="values">An array of string values</param>
        </member>
        <member name="P:Tomlyn.Syntax.ArraySyntax.OpenBracket">
            <summary>
            Gets or sets the open bracket `[` token
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.ArraySyntax.Items">
            <summary>
            Gets the <see cref="T:Tomlyn.Syntax.ArrayItemSyntax"/> of this array.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.ArraySyntax.CloseBracket">
            <summary>
            Gets or sets the close bracket `]` token
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.BareKeyOrStringValueSyntax">
            <summary>
            Base class for a <see cref="T:Tomlyn.Syntax.BareKeySyntax"/> or a <see cref="T:Tomlyn.Syntax.StringValueSyntax"/>
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.BareKeySyntax">
            <summary>
            A TOML bare key syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.BareKeySyntax.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.BareKeySyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.BareKeySyntax.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.BareKeySyntax"/>
            </summary>
            <param name="name">The name used for this key</param>
        </member>
        <member name="P:Tomlyn.Syntax.BareKeySyntax.Key">
            <summary>
            A textual representation of the key
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.BooleanValueSyntax">
            <summary>
            A boolean TOML value syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.BooleanValueSyntax.#ctor">
            <summary>
            Creates an instance of a <see cref="T:Tomlyn.Syntax.BooleanValueSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.BooleanValueSyntax.#ctor(System.Boolean)">
            <summary>
            Creates an instance of a <see cref="T:Tomlyn.Syntax.BooleanValueSyntax"/>
            </summary>
            <param name="value">The boolean value</param>
        </member>
        <member name="P:Tomlyn.Syntax.BooleanValueSyntax.Token">
            <summary>
            The boolean token value (true or false)
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.BooleanValueSyntax.Value">
            <summary>
            The boolean parsed value.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.DateTimeValueSyntax">
            <summary>
            A datetime TOML value syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DateTimeValueSyntax.#ctor(Tomlyn.Syntax.SyntaxKind)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.DateTimeValueSyntax"/>
            </summary>
            <param name="kind">The kind of datetime</param>
        </member>
        <member name="P:Tomlyn.Syntax.DateTimeValueSyntax.Token">
            <summary>
            Gets or sets the datetime token.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DateTimeValueSyntax.Value">
            <summary>
            Gets or sets the parsed datetime value.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.DiagnosticMessage">
            <summary>
            A diagnostic message with errors.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticMessage.#ctor(Tomlyn.Syntax.DiagnosticMessageKind,Tomlyn.Syntax.SourceSpan,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.DiagnosticMessage"/>
            </summary>
            <param name="kind">The kind of message</param>
            <param name="span">The source span</param>
            <param name="message">The message</param>
        </member>
        <member name="P:Tomlyn.Syntax.DiagnosticMessage.Kind">
            <summary>
            Gets the kind of message.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DiagnosticMessage.Span">
            <summary>
            Gets the source span.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DiagnosticMessage.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.DiagnosticMessageKind">
            <summary>
            Kind of a <see cref="T:Tomlyn.Syntax.DiagnosticMessage"/>
            </summary>
        </member>
        <member name="F:Tomlyn.Syntax.DiagnosticMessageKind.Error">
            <summary>
            An error message.
            </summary>
        </member>
        <member name="F:Tomlyn.Syntax.DiagnosticMessageKind.Warning">
            <summary>
            A warning message.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.DiagnosticsBag">
            <summary>
            A container for <see cref="T:Tomlyn.Syntax.DiagnosticMessage"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.DiagnosticsBag"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.#ctor(System.Collections.Generic.IEnumerable{Tomlyn.Syntax.DiagnosticMessage})">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.DiagnosticsBag"/>.
            </summary>
            <param name="messages">An existing list of messages.</param>
        </member>
        <member name="P:Tomlyn.Syntax.DiagnosticsBag.Count">
            <summary>
            Gets the number of messages.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DiagnosticsBag.Item(System.Int32)">
            <summary>
            Gets the message at the specified index.
            </summary>
            <param name="index">Index of the message.</param>
            <returns>A diagnostic message.</returns>
        </member>
        <member name="P:Tomlyn.Syntax.DiagnosticsBag.HasErrors">
            <summary>
            Gets a boolean indicating if this bag contains any error messages.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.Add(Tomlyn.Syntax.DiagnosticMessage)">
            <summary>
            Adds the specified message to this bag.
            </summary>
            <param name="message">The message to add</param>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.AddRange(System.Collections.Generic.IEnumerable{Tomlyn.Syntax.DiagnosticMessage})">
            <summary>
            Adds the specified list of messages to this bag.
            </summary>
            <param name="messages">A list of messages.</param>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.Clear">
            <summary>
            Clear this bag including the error state.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.Warning(Tomlyn.Syntax.SourceSpan,System.String)">
            <summary>
            Adds a warning message
            </summary>
            <param name="span">The source span</param>
            <param name="text">The warning message</param>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.Error(Tomlyn.Syntax.SourceSpan,System.String)">
            <summary>
            Adds an error message
            </summary>
            <param name="span">The source span</param>
            <param name="text">The error message</param>
        </member>
        <member name="M:Tomlyn.Syntax.DiagnosticsBag.GetEnumerator">
            <summary>
            Gets the enumerator of <see cref="T:Tomlyn.Syntax.DiagnosticMessage"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tomlyn.Syntax.DocumentSyntax">
            <summary>
            Root TOML syntax tree
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DocumentSyntax.#ctor">
            <summary>
            Creates an instance of a <see cref="T:Tomlyn.Syntax.DocumentSyntax"/>
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DocumentSyntax.Diagnostics">
            <summary>
            Gets the diagnostics attached to this document.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DocumentSyntax.HasErrors">
            <summary>
            Gets a boolean indicating if the <see cref="P:Tomlyn.Syntax.DocumentSyntax.Diagnostics"/> has any errors.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DocumentSyntax.KeyValues">
            <summary>
            Gets the list of <see cref="T:Tomlyn.Syntax.KeyValueSyntax"/>
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DocumentSyntax.Tables">
            <summary>
            Gets the list of tables (either <see cref="T:Tomlyn.Syntax.TableSyntax"/> or <see cref="T:Tomlyn.Syntax.TableArraySyntax"/>)
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.DottedKeyItemSyntax">
            <summary>
            A part of a TOML dotted key used by <see cref="T:Tomlyn.Syntax.KeySyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DottedKeyItemSyntax.#ctor">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.DottedKeyItemSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.DottedKeyItemSyntax.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.DottedKeyItemSyntax"/>
            </summary>
            <param name="key">The key used after the `.`</param>
        </member>
        <member name="P:Tomlyn.Syntax.DottedKeyItemSyntax.Dot">
            <summary>
            The token `.`
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.DottedKeyItemSyntax.Key">
            <summary>
            The following key or string node.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.FloatValueSyntax">
            <summary>
            A float TOML value syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.FloatValueSyntax.#ctor">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.FloatValueSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.FloatValueSyntax.#ctor(System.Double)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.FloatValueSyntax"/>
            </summary>
            <param name="value">The double value</param>
        </member>
        <member name="P:Tomlyn.Syntax.FloatValueSyntax.Token">
            <summary>
            The token storing the float value.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.FloatValueSyntax.Value">
            <summary>
            The parsed value of the <see cref="P:Tomlyn.Syntax.FloatValueSyntax.Token"/>
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.InlineTableItemSyntax">
            <summary>
            A key-value pair item of an inline table.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.InlineTableItemSyntax.#ctor">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.InlineTableItemSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.InlineTableItemSyntax.#ctor(Tomlyn.Syntax.KeyValueSyntax)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.InlineTableItemSyntax"/>
            </summary>
            <param name="keyValue">The key=value</param>
        </member>
        <member name="P:Tomlyn.Syntax.InlineTableItemSyntax.KeyValue">
            <summary>
            Gets or sets the <see cref="T:Tomlyn.Syntax.KeyValueSyntax"/>.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.InlineTableItemSyntax.Comma">
            <summary>
            Gets or sets the comma, mandatory to separate entries in an inline table.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.InlineTableSyntax">
            <summary>
            An inline table TOML syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.InlineTableSyntax.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:Tomlyn.Syntax.InlineTableSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.InlineTableSyntax.#ctor(Tomlyn.Syntax.KeyValueSyntax[])">
            <summary>
            Creates a new instance of an <see cref="T:Tomlyn.Syntax.InlineTableSyntax"/>
            </summary>
            <param name="keyValues">The key values of this inline table</param>
        </member>
        <member name="P:Tomlyn.Syntax.InlineTableSyntax.OpenBrace">
            <summary>
            The token open brace `{`
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.InlineTableSyntax.Items">
            <summary>
            The items of this table.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.InlineTableSyntax.CloseBrace">
            <summary>
            The token close brace `}`
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.IntegerValueSyntax">
            <summary>
            An integer TOML value syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.IntegerValueSyntax.#ctor">
            <summary>
            Creates an <see cref="T:Tomlyn.Syntax.IntegerValueSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.IntegerValueSyntax.#ctor(System.Int64)">
            <summary>
            Creates an <see cref="T:Tomlyn.Syntax.IntegerValueSyntax"/> 
            </summary>
            <param name="value">The integer value</param>
        </member>
        <member name="P:Tomlyn.Syntax.IntegerValueSyntax.Token">
            <summary>
            The integer token with its textual representation
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.IntegerValueSyntax.Value">
            <summary>
            The parsed integer value
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.InvalidSyntaxToken">
            <summary>
            Represents an invalid <see cref="T:Tomlyn.Syntax.SyntaxToken"/>
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.InvalidSyntaxToken.InvalidKind">
            <summary>
            The kind of token which is invalid for the context.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.KeySyntax">
            <summary>
            A key TOML syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.KeySyntax.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.KeySyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.KeySyntax.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.KeySyntax"/>
            </summary>
            <param name="key">A simple name of this key</param>
        </member>
        <member name="M:Tomlyn.Syntax.KeySyntax.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.KeySyntax"/>
            </summary>
            <param name="key">the base key</param>
            <param name="dotKey1">the key after the dot</param>
        </member>
        <member name="P:Tomlyn.Syntax.KeySyntax.Key">
            <summary>
            The base of the key before the dot
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.KeySyntax.DotKeys">
            <summary>
            List of the dotted keys.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.KeyValueSyntax">
            <summary>
            A TOML key = value syntax node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.KeyValueSyntax.#ctor">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.KeyValueSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.KeyValueSyntax.#ctor(System.String,Tomlyn.Syntax.ValueSyntax)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.KeyValueSyntax"/>
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Tomlyn.Syntax.KeyValueSyntax.#ctor(Tomlyn.Syntax.KeySyntax,Tomlyn.Syntax.ValueSyntax)">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.KeyValueSyntax"/>
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="P:Tomlyn.Syntax.KeyValueSyntax.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.KeyValueSyntax.EqualToken">
            <summary>
            Gets or sets the `=` token
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.KeyValueSyntax.Value">
            <summary>
            Gets or sets the value
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.KeyValueSyntax.EndOfLineToken">
            <summary>
            Gets or sets the new-line token.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.SourceSpan">
            <summary>
            A textual source span.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SourceSpan.#ctor(System.String,Tomlyn.Syntax.TextPosition,Tomlyn.Syntax.TextPosition)">
            <summary>
            Creates a source span.
            </summary>
            <param name="fileName"></param>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="F:Tomlyn.Syntax.SourceSpan.FileName">
            <summary>
            Gets or sets the filename.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SourceSpan.Offset">
            <summary>
            Gets the starting offset of this span.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SourceSpan.Length">
            <summary>
            Gets the length of this span.
            </summary>
        </member>
        <member name="F:Tomlyn.Syntax.SourceSpan.Start">
            <summary>
            Gets or sets the starting text position.
            </summary>
        </member>
        <member name="F:Tomlyn.Syntax.SourceSpan.End">
            <summary>
            Gets or sets the ending text position.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SourceSpan.ToStringSimple">
            <summary>
            A string representation of this source span not including the <see cref="F:Tomlyn.Syntax.SourceSpan.End"/> position.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.StringValueSyntax">
            <summary>
            A string TOML syntax value node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.StringValueSyntax.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Tomlyn.Syntax.StringValueSyntax"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.StringValueSyntax.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Tomlyn.Syntax.StringValueSyntax"/>
            </summary>
            <param name="text">String value used for this node</param>
        </member>
        <member name="P:Tomlyn.Syntax.StringValueSyntax.Token">
            <summary>
            The token of the string.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.StringValueSyntax.Value">
            <summary>
            The associated parsed string value
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxFactory">
            <summary>
            A factory for <see cref="T:Tomlyn.Syntax.SyntaxNode"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxFactory.Whitespace">
            <summary>
            Creates a trivia whitespace.
            </summary>
            <returns>A trivia whitespace.</returns>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxFactory.NewLineTrivia">
            <summary>
            Creates a newline trivia.
            </summary>
            <returns>A new line trivia</returns>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxFactory.Comment(System.String)">
            <summary>
            Creates a comment trivia.
            </summary>
            <param name="comment">A comment trivia</param>
            <returns>A comment trivia</returns>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxFactory.NewLine">
            <summary>
            Creates a newline token.
            </summary>
            <returns>A new line token</returns>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxFactory.Token(Tomlyn.Syntax.TokenKind)">
            <summary>
            Creates a token from the specified token kind.
            </summary>
            <param name="kind">The token kind</param>
            <returns>The token</returns>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxKind">
            <summary>
            Defines the kind for a <see cref="T:Tomlyn.Syntax.SyntaxNode"/>
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxList">
            <summary>
            Abstract list of <see cref="T:Tomlyn.Syntax.SyntaxNode"/>
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxList`1">
            <summary>
            Abstract list of <see cref="T:Tomlyn.Syntax.SyntaxNode"/>
            </summary>
            <typeparam name="TSyntaxNode">Type of the node</typeparam>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxList`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Tomlyn.Syntax.SyntaxList`1"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxList`1.Add(`0)">
            <summary>
            Adds the specified node to this list.
            </summary>
            <param name="node">Node to add to this list</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxList`1.RemoveChildAt(System.Int32)">
            <summary>
            Removes a node at the specified index.
            </summary>
            <param name="index">Index of the node to remove</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxList`1.RemoveChild(`0)">
            <summary>
            Removes the specified node instance.
            </summary>
            <param name="node">Node instance to remove</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxList`1.GetEnumerator">
            <summary>
            Gets the default enumerator.
            </summary>
            <returns>The enumerator of this list</returns>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxList`1.Enumerator">
            <summary>
            Enumerator of a <see cref="T:Tomlyn.Syntax.SyntaxList`1"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxList`1.Enumerator.#ctor(System.Collections.Generic.List{Tomlyn.Syntax.SyntaxNode})">
            <summary>
            Initialize an enumerator with a list of <see cref="T:Tomlyn.Syntax.SyntaxNode"/>
            </summary>
            <param name="nodes"></param>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxNode">
            <summary>
            Base class used to define a TOML Syntax tree.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxNode.Kind">
            <summary>
            Gets the type of node.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxNode.LeadingTrivia">
            <summary>
            Gets the leading trivia attached to this node. Might be null if no leading trivias.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxNode.TrailingTrivia">
            <summary>
            Gets the trailing trivia attached to this node. Might be null if no trailing trivias.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxNode.ChildrenCount">
            <summary>
            Gets the number of children.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.GetChild(System.Int32)">
            <summary>
            Gets a child at the specified index.
            </summary>
            <param name="index">Index of the child</param>
            <returns>A child at the specified index</returns>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.GetChildImpl(System.Int32)">
            <summary>
            Gets a child at the specified index.
            </summary>
            <param name="index">Index of the child</param>
            <returns>A child at the specified index</returns>
            <remarks>The index is safe to use</remarks>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.WriteTo(System.IO.TextWriter)">
            <summary>
            Writes this node to a textual TOML representation
            </summary>
            <param name="writer">A writer to receive the TOML output</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.ParentToThis``1(``0@,``0)">
            <summary>
            Helper method to deparent/parent a node to this instance.
            </summary>
            <typeparam name="TSyntaxNode">Type of the node</typeparam>
            <param name="set">The previous child node parented to this instance</param>
            <param name="node">The new child node to parent to this instance</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.ParentToThis``1(``0@,``0,Tomlyn.Syntax.TokenKind)">
            <summary>
            Helper method to deparent/parent a <see cref="T:Tomlyn.Syntax.SyntaxToken"/> to this instance with an expected kind of token.
            </summary>
            <typeparam name="TSyntaxNode">Type of the node</typeparam>
            <param name="set">The previous child node parented to this instance</param>
            <param name="node">The new child node to parent to this instance</param>
            <param name="expectedKind">The expected kind of token</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.ParentToThis``2(``0@,``0,System.Boolean,``1)">
            <summary>
            Helper method to deparent/parent a <see cref="T:Tomlyn.Syntax.SyntaxToken"/> to this instance with an expected kind of token condition.
            </summary>
            <typeparam name="TSyntaxNode">Type of the node</typeparam>
            <typeparam name="TExpected">The type of message</typeparam>
            <param name="set">The previous child node parented to this instance</param>
            <param name="node">The new child node to parent to this instance</param>
            <param name="expectedKindSuccess">true if kind is matching, false otherwise</param>
            <param name="expectedMessage">The message to display if the kind is not matching</param>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNode.ParentToThis``1(``0@,``0,Tomlyn.Syntax.TokenKind,Tomlyn.Syntax.TokenKind)">
            <summary>
            Helper method to deparent/parent a <see cref="T:Tomlyn.Syntax.SyntaxToken"/> to this instance with an expected kind of token.
            </summary>
            <typeparam name="TSyntaxNode">Type of the node</typeparam>
            <param name="set">The previous child node parented to this instance</param>
            <param name="node">The new child node to parent to this instance</param>
            <param name="expectedKind1">The expected kind of token (option1)</param>
            <param name="expectedKind2">The expected kind of token (option2)</param>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxNodeBase">
            <summary>
            Base class for <see cref="T:Tomlyn.Syntax.SyntaxNode"/> and <see cref="T:Tomlyn.Syntax.SyntaxTrivia"/>
            </summary>
        </member>
        <member name="F:Tomlyn.Syntax.SyntaxNodeBase.Span">
            <summary>
            The text source span, read-write, manually updated from children.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNodeBase.Accept(Tomlyn.Syntax.SyntaxVisitor)">
            <summary>
            Allow to visit this instance with the specified visitor.
            </summary>
            <param name="visitor">The visitor</param>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxNodeBase.Parent">
            <summary>
            Gets the parent of this node.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxNodeExtensions">
            <summary>
            Extensions for <see cref="T:Tomlyn.Syntax.SyntaxNode"/>.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNodeExtensions.Tokens(Tomlyn.Syntax.SyntaxNode,System.Boolean)">
            <summary>
            Get all <see cref="T:Tomlyn.Syntax.SyntaxToken"/> and <see cref="T:Tomlyn.Syntax.SyntaxTrivia"/> in Depth-First-Search order of the node.
            </summary>
            <param name="node">The node to collect all tokens from</param>
            <param name="includeCommentsAndWhitespaces"><c>true</c> to include comments and whitespaces.</param>
            <returns>All descendants in Depth-First-Search order of the node.</returns>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxNodeExtensions.Descendants(Tomlyn.Syntax.SyntaxNode,System.Boolean)">
            <summary>
            Get all descendants in Depth-First-Search order of the node. Note that this method returns the node itself (last).
            </summary>
            <param name="node">The node to collect all descendants</param>
            <param name="includeTokensCommentsAndWhitespaces"><c>true</c> to include tokens, comments and whitespaces.</param>
            <returns>All descendants in Depth-First-Search order of the node.</returns>
        </member>
        <member name="T:Tomlyn.Syntax.SyntaxToken">
            <summary>
            A token node.
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxToken.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Tomlyn.Syntax.SyntaxToken"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.SyntaxToken.#ctor(Tomlyn.Syntax.TokenKind,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Tomlyn.Syntax.SyntaxToken"/>
            </summary>
            <param name="tokenKind">The type of token</param>
            <param name="text">The associated textual representation</param>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxToken.TokenKind">
            <summary>
            Gets or sets the kind of token.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.SyntaxToken.Text">
            <summary>
            Gets or sets the associated text
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.TableSyntaxBase">
            <summary>
            Base class for a <see cref="T:Tomlyn.Syntax.TableSyntax"/> or a <see cref="T:Tomlyn.Syntax.TableArraySyntax"/>
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TableSyntaxBase.OpenBracket">
            <summary>
            Gets or sets the open bracket (simple `[` for <see cref="T:Tomlyn.Syntax.TableSyntax"/>, double `[[` for <see cref="T:Tomlyn.Syntax.TableArraySyntax"/>)
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TableSyntaxBase.Name">
            <summary>
            Gets or sets the name of this table
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TableSyntaxBase.CloseBracket">
            <summary>
            Gets or sets the close bracket (simple `]` for <see cref="T:Tomlyn.Syntax.TableSyntax"/>, double `]]` for <see cref="T:Tomlyn.Syntax.TableArraySyntax"/>)
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TableSyntaxBase.EndOfLineToken">
            <summary>
            Gets the new-line.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TableSyntaxBase.Items">
            <summary>
            Gets the key-values associated with this table.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.TextPosition">
            <summary>
            A position within a text (offset, line column)
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.TextPosition.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Tomlyn.Syntax.TextPosition"/>
            </summary>
            <param name="offset">Offset in the source text</param>
            <param name="line">Line number - zero based</param>
            <param name="column">Column number - zero based</param>
        </member>
        <member name="P:Tomlyn.Syntax.TextPosition.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TextPosition.Column">
            <summary>
            Gets or sets the column number (zero based)
            </summary>
        </member>
        <member name="P:Tomlyn.Syntax.TextPosition.Line">
            <summary>
            Gets or sets the line number (zero based)
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.TokenKind">
            <summary>
            An enumeration to categorize tokens.
            </summary>
        </member>
        <member name="T:Tomlyn.Syntax.TokenKindExtensions">
            <summary>
            Helper functions for <see cref="T:Tomlyn.Syntax.TokenKind"/>
            </summary>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsHidden(Tomlyn.Syntax.TokenKind,System.Boolean)">
            <summary>
            Returns <c>true</c> if the specified token kind is considered as hidden (comments, whitespaces or newline)
            </summary>
            <param name="tokenKind">The token kind.</param>
            <param name="hideNewLine">Makes the newline hidden by default. Default is true.</param>
            <returns><c>true</c> if the specified token kind is considered as hidden; <c>false</c> otherwise</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.ToText(Tomlyn.Syntax.TokenKind)">
            <summary>
            Gets a textual representation of a token kind or null if not applicable (e.g TokenKind.Integer)
            </summary>
            <param name="kind">A token kind</param>
            <returns>A textual representation of a token kind or null if not applicable (e.g TokenKind.Integer)</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsFloat(Tomlyn.Syntax.TokenKind)">
            <summary>
            Checks if the specified kind is a float.
            </summary>
            <param name="kind">A token kind</param>
            <returns><c>true</c> if the specified kind is a float.</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsInteger(Tomlyn.Syntax.TokenKind)">
            <summary>
            Checks if the specified kind is an integer
            </summary>
            <param name="kind">A token kind</param>
            <returns><c>true</c> if the specified kind is an integer.</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsDateTime(Tomlyn.Syntax.TokenKind)">
            <summary>
            Checks if the specified kind is a datetime.
            </summary>
            <param name="kind">A token kind</param>
            <returns><c>true</c> if the specified kind is a datetime.</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsString(Tomlyn.Syntax.TokenKind)">
            <summary>
            Checks if the specified kind is a string.
            </summary>
            <param name="kind">A token kind</param>
            <returns><c>true</c> if the specified kind is a string</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsTrivia(Tomlyn.Syntax.TokenKind)">
            <summary>
            Checks if the specified kind is a trivia.
            </summary>
            <param name="kind">A token kind</param>
            <returns><c>true</c> if the specified kind is a trivia</returns>
        </member>
        <member name="M:Tomlyn.Syntax.TokenKindExtensions.IsToken(Tomlyn.Syntax.TokenKind)">
            <summary>
            Checks if the specified kind is a token for which <see cref="M:Tomlyn.Syntax.TokenKindExtensions.ToText(Tomlyn.Syntax.TokenKind)"/> will return not null
            </summary>
            <param name="kind">A token kind</param>
            <returns><c>true</c> if the specified kind is a simple token</returns>
        </member>
        <member name="T:Tomlyn.Syntax.ValueSyntax">
            <summary>
            Base class for all TOML values.
            </summary>
        </member>
        <member name="T:Tomlyn.Text.char32">
            <summary>
            A UTF-32 character ala Stark.
            </summary>
        </member>
        <member name="M:Tomlyn.Text.char32.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Tomlyn.Text.char32"/> UTF-32 character.
            </summary>
            <param name="code">The UTF-32 code character.</param>
        </member>
        <member name="P:Tomlyn.Text.char32.Code">
            <summary>
            Gets the UTF-32 code.
            </summary>
        </member>
        <member name="M:Tomlyn.Text.char32.op_Implicit(Tomlyn.Text.char32)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:Tomlyn.Text.char32"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="c">The c.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Tomlyn.Text.char32.op_Implicit(System.Int32)~Tomlyn.Text.char32">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Tomlyn.Text.char32"/>.
            </summary>
            <param name="c">The c.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Tomlyn.Text.CharacterIterator">
            <summary>
            (trait) CharacterIterator ala Stark
            </summary>
        </member>
        <member name="M:Tomlyn.Text.CharHelper.EscapeForToml(System.String,System.Boolean)">
            <summary>
            Escape a C# string to a TOML string
            </summary>
        </member>
        <member name="M:Tomlyn.Text.CharHelper.ToPrintableString(System.String)">
            <summary>
            Converts a string that may have control characters to a printable string
            </summary>
        </member>
        <member name="T:Tomlyn.Toml">
            <summary>
            Main entry class to parse, validate and transform to a model a TOML document.
            </summary>
        </member>
        <member name="F:Tomlyn.Toml.Version">
            <summary>
            Shows version
            </summary>
        </member>
        <member name="M:Tomlyn.Toml.Parse(System.String,System.String,Tomlyn.TomlParserOptions)">
            <summary>
            Parses a text to a TOML document.
            </summary>
            <param name="text">A string representing a TOML document</param>
            <param name="sourcePath">An optional path/file name to identify errors</param>
            <param name="options">Options for parsing. Default is parse and validate.</param>
            <returns>A parsed TOML document</returns>
        </member>
        <member name="M:Tomlyn.Toml.Parse(System.Byte[],System.String,Tomlyn.TomlParserOptions)">
            <summary>
            Parses a UTF8 byte array to a TOML document.
            </summary>
            <param name="utf8Bytes">A UTF8 string representing a TOML document</param>
            <param name="sourcePath">An optional path/file name to identify errors</param>
            <param name="options">Options for parsing. Default is parse and validate.</param>
            <returns>A parsed TOML document</returns>
        </member>
        <member name="M:Tomlyn.Toml.Validate(Tomlyn.Syntax.DocumentSyntax)">
            <summary>
            Validates the specified TOML document.
            </summary>
            <param name="doc">The TOML document to validate</param>
            <returns>The same instance as the parameter. Check <see cref="P:Tomlyn.Syntax.DocumentSyntax.HasErrors"/> and <see cref="P:Tomlyn.Syntax.DocumentSyntax.Diagnostics"/> for details.</returns>
        </member>
        <member name="M:Tomlyn.Toml.FromModel(System.Object,Tomlyn.TomlModelOptions)">
            <summary>
            Gets the TOML string representation from the specified model.
            </summary>
            <param name="model">The type of the mode</param>
            <param name="options">Optional parameters for the serialization.</param>
            <returns>The TOML string representation from the specified model.</returns>
            <exception cref="T:Tomlyn.TomlException">If there are errors while trying to serialize to a TOML string.</exception>
        </member>
        <member name="M:Tomlyn.Toml.TryFromModel(System.Object,System.String@,Tomlyn.Syntax.DiagnosticsBag@,Tomlyn.TomlModelOptions)">
            <summary>
            Tries to get the TOML string representation from the specified model.
            </summary>
            <param name="model">The model instance to serialize to TOML.</param>
            <param name="modelAsToml">The TOML string representation from the specified model if this method returns true.</param>
            <param name="diagnostics">The diagnostics error messages if this method returns false.</param>
            <param name="options">Optional parameters for the serialization.</param>
            <returns>The TOML string representation from the specified model.</returns>
            <returns><c>true</c> if the conversion was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tomlyn.Toml.TryFromModel(System.Object,System.IO.TextWriter,Tomlyn.Syntax.DiagnosticsBag@,Tomlyn.TomlModelOptions)">
            <summary>
            Tries to get the TOML string representation from the specified model.
            </summary>
            <param name="model">The model instance to serialize to TOML.</param>
            <param name="writer">The TOML string representation written to a <see cref="T:System.IO.TextWriter"/> if this method returns true.</param>
            <param name="diagnostics">The diagnostics error messages if this method returns false.</param>
            <param name="options">Optional parameters for the serialization.</param>
            <returns>The TOML string representation from the specified model.</returns>
            <returns><c>true</c> if the conversion was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Tomlyn.Toml.ToModel(System.String,System.String,Tomlyn.TomlModelOptions)">
            <summary>
            Parses a TOML text to directly to a model.
            </summary>
            <param name="text">A string representing a TOML document</param>
            <param name="sourcePath">An optional path/file name to identify errors</param>
            <param name="options">The options for the mapping.</param>
            <returns>A parsed TOML document returned as <see cref="T:Tomlyn.Model.TomlTable"/>.</returns>
        </member>
        <member name="M:Tomlyn.Toml.ToModel``1(System.String,System.String,Tomlyn.TomlModelOptions)">
            <summary>
            Parses a TOML text to directly to a model.
            </summary>
            <param name="text">A string representing a TOML document</param>
            <param name="sourcePath">An optional path/file name to identify errors</param>
            <param name="options">The options for the mapping.</param>
            <returns>A parsed TOML document</returns>
        </member>
        <member name="M:Tomlyn.Toml.TryToModel``1(System.String,``0@,Tomlyn.Syntax.DiagnosticsBag@,System.String,Tomlyn.TomlModelOptions)">
            <summary>
            Tries to parses a TOML text directly to a model.
            </summary>
            <param name="text">A string representing a TOML document</param>
            <param name="model">The output model.</param>
            <param name="diagnostics">The diagnostics if this method returns false.</param>
            <param name="sourcePath">An optional path/file name to identify errors</param>
            <param name="options">The options for the mapping.</param>
            <returns>A parsed TOML document</returns>
        </member>
        <member name="M:Tomlyn.Toml.ToModel(Tomlyn.Syntax.DocumentSyntax)">
            <summary>
            Converts a <see cref="T:Tomlyn.Syntax.DocumentSyntax"/> to a <see cref="T:Tomlyn.Model.TomlTable"/>
            </summary>
            <param name="syntax">A TOML document</param>
            <returns>A <see cref="T:Tomlyn.Model.TomlTable"/>, a runtime representation of the TOML document</returns>
        </member>
        <member name="M:Tomlyn.Toml.ToModel``1(Tomlyn.Syntax.DocumentSyntax,Tomlyn.TomlModelOptions)">
            <summary>
            Converts a <see cref="T:Tomlyn.Syntax.DocumentSyntax"/> to the specified runtime object.
            </summary>
            <typeparam name="T">The runtime object to map the syntax to</typeparam>
            <param name="syntax">The syntax to map from.</param>
            <param name="options">The options for the mapping.</param>
            <returns>The result of mapping <see cref="T:Tomlyn.Syntax.DocumentSyntax"/> to a runtime model of type T </returns>
            <exception cref="T:Tomlyn.TomlException">If there were errors when mapping to properties.</exception>
        </member>
        <member name="M:Tomlyn.Toml.TryToModel``1(Tomlyn.Syntax.DocumentSyntax,``0@,Tomlyn.Syntax.DiagnosticsBag@,Tomlyn.TomlModelOptions)">
            <summary>
            Tries to convert a <see cref="T:Tomlyn.Syntax.DocumentSyntax"/> to the specified runtime object.
            </summary>
            <typeparam name="T">The runtime object to map the syntax to</typeparam>
            <param name="syntax">The syntax to map from.</param>
            <param name="model">The output model.</param>
            <param name="diagnostics">The diagnostics if this method returns false.</param>
            <param name="options">The options for the mapping.</param>
            <returns><c>true</c> if the mapping was successful; <c>false</c> otherwise. In that case the output <paramref name="diagnostics"/> will contain error messages.</returns>
        </member>
        <member name="T:Tomlyn.TomlDateTime">
            <summary>
            A datetime value that can represent a TOML
            - An offset DateTime with Zero offset or Number offset.
            - A local DateTime.
            - A local Date.
            - A local Time.
            </summary>
            <param name="DateTime">The datetime offset.</param>
            <param name="SecondPrecision">The precision of milliseconds.</param>
            <param name="Kind">The kind of datetime offset.</param>
        </member>
        <member name="M:Tomlyn.TomlDateTime.#ctor(System.DateTimeOffset,System.Int32,Tomlyn.TomlDateTimeKind)">
            <summary>
            A datetime value that can represent a TOML
            - An offset DateTime with Zero offset or Number offset.
            - A local DateTime.
            - A local Date.
            - A local Time.
            </summary>
            <param name="DateTime">The datetime offset.</param>
            <param name="SecondPrecision">The precision of milliseconds.</param>
            <param name="Kind">The kind of datetime offset.</param>
        </member>
        <member name="P:Tomlyn.TomlDateTime.DateTime">
            <summary>The datetime offset.</summary>
        </member>
        <member name="P:Tomlyn.TomlDateTime.SecondPrecision">
            <summary>The precision of milliseconds.</summary>
        </member>
        <member name="P:Tomlyn.TomlDateTime.Kind">
            <summary>The kind of datetime offset.</summary>
        </member>
        <member name="M:Tomlyn.TomlDateTime.GetFormatPrecision(System.Int32)">
            <summary>
            Gets the string formatter for the specified precision.
            </summary>
            <param name="precision">A precision number from 1 to 7. Other numbers will return the default `fff` formatter.</param>
            <returns>The string formatter for the specified precision.</returns>
        </member>
        <member name="M:Tomlyn.TomlDateTime.op_Implicit(System.DateTime)~Tomlyn.TomlDateTime">
            <summary>
            Converts a datetime to TomlDateTime.
            </summary>
        </member>
        <member name="T:Tomlyn.TomlDateTimeKind">
            <summary>
            Offsets used for a <see cref="T:Tomlyn.TomlDateTime"/>
            </summary>
        </member>
        <member name="F:Tomlyn.TomlModelOptions.DefaultCreateInstance">
            <summary>
            Default member to create an instance.
            </summary>
        </member>
        <member name="F:Tomlyn.TomlModelOptions.DefaultConvertPropertyName">
            <summary>
            Default convert name using snake case via help <see cref="M:Tomlyn.Helpers.TomlNamingHelper.PascalToSnakeCase(System.String)"/>.
            </summary>
        </member>
        <member name="F:Tomlyn.TomlModelOptions.DefaultConvertFieldName">
            <summary>
            Default convert name using snake case via help <see cref="M:Tomlyn.Helpers.TomlNamingHelper.PascalToSnakeCase(System.String)"/>.
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.GetPropertyName">
            <summary>
            Gets or sets the delegate to retrieve a name from a property. If this function returns null, the property is ignored.
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.GetFieldName">
            <summary>
            Gets or sets the delegate to retrieve a field from a property. If this function returns null, the field is ignored.
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.ConvertPropertyName">
            <summary>
            Gets or sets the delegate used to convert the name of the property to the name used in TOML. By default, it is using snake case via <see cref="M:Tomlyn.Helpers.TomlNamingHelper.PascalToSnakeCase(System.String)"/>.
            </summary>
            <remarks>
            This delegate is used by the default <see cref="P:Tomlyn.TomlModelOptions.GetPropertyName"/> delegate.
            </remarks>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.ConvertFieldName">
            <summary>
            Gets or sets the delegate used to convert the name of the field to the name used in TOML. By default, it is using snake case via <see cref="M:Tomlyn.Helpers.TomlNamingHelper.PascalToSnakeCase(System.String)"/>.
            </summary>
            <remarks>
            This delegate is used by the default <see cref="P:Tomlyn.TomlModelOptions.GetFieldName"/> delegate.
            </remarks>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.CreateInstance">
            <summary>
            Gets or sets the function used when deserializing from TOML to create instance of objects. Default is set to <see cref="F:Tomlyn.TomlModelOptions.DefaultCreateInstance"/>.
            The arguments of the function are:
            - The type to create an instance for.
            - The expected <see cref="T:Tomlyn.Model.ObjectKind"/> from a TOML perspective.
            Returns an instance according to the type and the expected <see cref="T:Tomlyn.Model.ObjectKind"/>.
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.ConvertTo">
            <summary>
            Gets or sets the convert function called when deserializing a value from TOML to a model (e.g string to Uri).
            
            Must return null if cannot convert. The arguments of the function are:
            - The input object value to convert.
            - The target type to convert to.
            
            Returns an instance of target type converted from the input value or null if conversion is not supported.
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.ConvertToModel">
            <summary>
            Gets or sets the convert function called when deserializing a value from TOML to a model (e.g string to Uri).
            
            Must return null if cannot convert. The arguments of the function are:
            - The input object value to convert.
            - The target type to convert to.
            
            Returns an instance of target type converted from the input value or null if conversion is not supported.
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.ConvertToToml">
            <summary>
            Gets or sets the convert function called when serializing a value from a model to a TOML representation.
            This function allows to substitute a value to another type before converting (e.g Uri to string).
            </summary>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.AttributeListForIgnore">
            <summary>
            Gets the list of the attributes used to ignore a property.
            </summary>
            <remarks>
            By default, the list contains:
            - System.Runtime.Serialization.IgnoreDataMemberAttribute
            - System.Text.Json.Serialization.JsonPropertyNameAttribute
            </remarks>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.AttributeListForGetName">
            <summary>
            Gets the list of the attributes used to fetch the property `Name`.
            </summary>
            <remarks>
            By default, the list contains:
            - System.Runtime.Serialization.DataMemberAttribute
            - System.Text.Json.Serialization.JsonPropertyNameAttribute
            </remarks>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.IgnoreMissingProperties">
            <summary>
            Gets or sets the option to ignore properties in the TOML that are missing from a custom model
            </summary>
            <remarks>
            By default this is false
            </remarks>
        </member>
        <member name="P:Tomlyn.TomlModelOptions.IncludeFields">
            <summary>
            Gets or sets the option to include fields from a custom model in the TOML
            </summary>
            <remarks>
            By default this is false
            </remarks>
        </member>
        <member name="M:Tomlyn.TomlModelOptions.DefaultGetPropertyNameImpl(System.Reflection.PropertyInfo)">
            <summary>
            Default implementation for getting the property name
            </summary>
        </member>
        <member name="M:Tomlyn.TomlModelOptions.DefaultGetFieldNameImpl(System.Reflection.FieldInfo)">
            <summary>
            Default implementation for getting the field name
            </summary>
        </member>
        <member name="T:Tomlyn.TomlParserOptions">
            <summary>
            Options for parsing a TOML string.
            </summary>
        </member>
        <member name="F:Tomlyn.TomlParserOptions.ParseAndValidate">
            <summary>
            Parse and validate.
            </summary>
        </member>
        <member name="F:Tomlyn.TomlParserOptions.ParseOnly">
            <summary>
            Parse only the document.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute">
            <summary>
            Indicates that the specified public static boolean get-only property
            guards access to the specified feature.
            </summary>
            <remarks>
            Analyzers can use this to prevent warnings on calls to code that is
            annotated as requiring that feature, when the callsite is guarded by a
            call to the property.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute"/> class
            with the specified feature type.
            </summary>
            <param name="featureType">
            The type that represents the feature guarded by the property.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.FeatureGuardAttribute.FeatureType">
            <summary>
            The type that represents the feature guarded by the property.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute">
            <summary>
            Indicates that the specified public static boolean get-only property
            corresponds to the feature switch specified by name.
            </summary>
            <remarks>
            IL rewriters and compilers can use this to substitute the return value
            of the specified property with the value of the feature switch.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute"/> class
            with the specified feature switch name.
            </summary>
            <param name="switchName">
            The name of the feature switch that provides the value for the specified property.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.FeatureSwitchDefinitionAttribute.SwitchName">
            <summary>
            The name of the feature switch that provides the value for the specified property.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
            Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
            <param name="message">
            A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
            Gets an optional message that contains information about the need for
            assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the member,
            why it requires assembly files to be on disk, and what options a consumer has
            to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.DebuggerDisableUserUnhandledExceptionsAttribute">
            <summary>
            If a .NET Debugger is attached which supports the Debugger.BreakForUserUnhandledException(Exception) API,
            this attribute will prevent the debugger from breaking on user-unhandled exceptions when the
            exception is caught by a method with this attribute, unless BreakForUserUnhandledException is called.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceHiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StackTraceHiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="!:ReadOnlySpan&lt;T&gt;"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.UnsafeAccessorAttribute">
             <summary>
             Provides access to an inaccessible member of a specific type.
             </summary>
             <remarks>
             This attribute may be applied to an <code>extern static</code> method.
             The implementation of the <code>extern static</code> method annotated with
             this attribute will be provided by the runtime based on the information in
             the attribute and the signature of the method that the attribute is applied to.
             The runtime will try to find the matching method or field and forward the call
             to it. If the matching method or field is not found, the body of the <code>extern</code>
             method will throw <see cref="T:System.MissingFieldException" /> or <see cref="T:System.MissingMethodException" />.
             Only the specific type defined will be examined for inaccessible members. The type hierarchy
             is not walked looking for a match.
            
             For <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Method"/>,
             <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticMethod"/>,
             <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Field"/>,
             and <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticField"/>, the type of
             the first argument of the annotated <code>extern</code> method identifies the owning type.
             The value of the first argument is treated as <code>this</code> pointer for instance fields and methods.
             The first argument must be passed as <code>ref</code> for instance fields and methods on structs.
             The value of the first argument is not used by the implementation for <code>static</code> fields and methods.
            
             Return type is considered for the signature match. modreqs and modopts are initially not considered for
             the signature match. However, if an ambiguity exists ignoring modreqs and modopts, a precise match
             is attempted. If an ambiguity still exists <see cref="T:System.Reflection.AmbiguousMatchException" /> is thrown.
            
             By default, the attributed method's name dictates the name of the method/field. This can cause confusion
             in some cases since language abstractions, like C# local functions, generate mangled IL names. The
             solution to this is to use the <code>nameof</code> mechanism and define the <see cref="P:System.Runtime.CompilerServices.UnsafeAccessorAttribute.Name"/> property.
            
             <code>
             public void Method(Class c)
             {
                 PrivateMethod(c);
            
                 [UnsafeAccessor(UnsafeAccessorKind.Method, Name = nameof(PrivateMethod))]
                 extern static void PrivateMethod(Class c);
             }
             </code>
             </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.UnsafeAccessorAttribute.#ctor(System.Runtime.CompilerServices.UnsafeAccessorKind)">
            <summary>
            Instantiates an <see cref="T:System.Runtime.CompilerServices.UnsafeAccessorAttribute"/>
            providing access to a member of kind <see cref="T:System.Runtime.CompilerServices.UnsafeAccessorKind"/>.
            </summary>
            <param name="kind">The kind of the target to which access is provided.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.UnsafeAccessorAttribute.Kind">
            <summary>
            Gets the kind of member to which access is provided.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.UnsafeAccessorAttribute.Name">
            <summary>
            Gets or sets the name of the member to which access is provided.
            </summary>
            <remarks>
            The name defaults to the annotated method name if not specified.
            The name must be unset/<code>null</code> for <see cref="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Constructor"/>.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.UnsafeAccessorKind">
            <summary>
            Specifies the kind of target to which an <see cref="T:System.Runtime.CompilerServices.UnsafeAccessorAttribute" /> is providing access.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Constructor">
            <summary>
            Provide access to a constructor.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Method">
            <summary>
            Provide access to a method.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticMethod">
            <summary>
            Provide access to a static method.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.Field">
            <summary>
            Provide access to a field.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.UnsafeAccessorKind.StaticField">
            <summary>
            Provide access to a static field.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices2.InlineArrayAttribute">
            <summary>
            Indicates that the instance's storage is sequentially replicated "length" times.
            </summary>
            <remarks>
            <para>
            This attribute can be used to annotate a <see langword="struct"/> type with a single field.
            The runtime will replicate that field in the actual type layout as many times as is specified.
            </para>
            <para>
            Here's an example of how an inline array type with 8 <see cref="T:System.Single"/> values can be declared:
            <code lang="csharp">
            [InlineArray(8)]
            struct Float8InlineArray
            {
                private float _value;
            }
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices2.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Creates a new <see cref="T:System.Runtime.CompilerServices2.InlineArrayAttribute"/> instance with the specified length.</summary>
            <param name="length">The number of sequential fields to replicate in the inline array type.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices2.InlineArrayAttribute.Length">
            <summary>Gets the number of sequential fields to replicate in the inline array type.</summary>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
             <summary>
             An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
             </summary>
             <example>
             Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function
             that reads some global memory and returns the value. In this case, the GC transition overhead is significantly
             more than the memory read.
             <code>
             using System;
             using System.Runtime.InteropServices;
             class Program
             {
                 [DllImport("Kernel32")]
                 [SuppressGCTransition]
                 static extern int GetTickCount();
                 static void Main()
                 {
                     Console.WriteLine($"{GetTickCount()}");
                 }
             }
             </code>
             </example>
             <remarks>
             This attribute is ignored if applied to a method without the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            
             Forgoing this transition can yield benefits when the cost of the transition is more than the execution time
             of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime
             provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the
             GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at
             https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/clr-code-guide.md#2.1.8.
             Suppressing the GC transition is an advanced scenario and should not be done without fully understanding
             potential consequences.
            
             One of these consequences is an impact to Mixed-mode debugging (https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
             During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that
             has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
             In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example
             stepping through the native code or diagnosing an exception thrown from the native code.
            
             The runtime may load the native library for method marked with this attribute in advance before the method is called for the first time.
             Usage of this attribute is not recommended for platform neutral libraries with conditional platform specific code.
            
             The P/Invoke method that this attribute is applied to must have all of the following properties:
               * Native function always executes for a trivial amount of time (less than 1 microsecond).
               * Native function does not perform a blocking syscall (e.g. any type of I/O).
               * Native function does not call back into the runtime (e.g. Reverse P/Invoke).
               * Native function does not throw exceptions.
               * Native function does not manipulate locks or other concurrency primitives.
            
             Consequences of invalid uses of this attribute:
               * GC starvation.
               * Immediate runtime termination.
               * Data corruption.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
            <remarks>
            Methods marked with this attribute have the following restrictions:
              * Method must be marked "static".
              * Must not be called from managed code.
              * Must only have <see href="https://docs.microsoft.com/dotnet/framework/interop/blittable-and-non-blittable-types">blittable</see> arguments.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
            <remarks>
            Supplied types must be from the official "System.Runtime.CompilerServices" namespace and
            be of the form "CallConvXXX".
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.WasmImportLinkageAttribute">
            <summary>
            Specifies that the P/Invoke marked with this attribute should be linked in as a WASM import.
            </summary>
            <remarks>
            See https://webassembly.github.io/spec/core/syntax/modules.html#imports.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.WasmImportLinkageAttribute.#ctor">
            <summary>
            Instance constructor.
            </summary>
        </member>
    </members>
</doc>
